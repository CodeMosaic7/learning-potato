from pydantic import BaseModel,Field, field_validator,EmailStr
from typing import Dict, Any
from datetime import datetime
from typing import Optional, List

# === USER SCHEMAS ===
class UserBase(BaseModel):
    email: EmailStr
    username: str
    full_name: Optional[str] = None

class UserCreate(UserBase):
    full_name:str
    username:str
    email:str
    password: str
  
class UserResponse(UserBase):
    id: int
    is_active: bool
    is_verified: bool
    created_at: datetime
    mental_age: Optional[int] = None
    assessment_date: Optional[datetime] = None

    class Config:
        from_attributes = True

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    email: Optional[str] = None


# === CHATBOT SCHEMAS ===

class ChatMessage(BaseModel):
    message: str = Field(..., min_length=1, max_length=1000, description="User message to the chatbot")
    timestamp: Optional[datetime] = Field(default_factory=datetime.utcnow)

class ChatResponse(BaseModel):
    response: str
    stage: str
    mental_age: Optional[int] = None
    intellect_level: Optional[str] = None
    progress: Optional[str] = None
    assessment_complete: Optional[bool] = False
    conversation_state: Optional[Dict[str, Any]] = "welcome"
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class InitializeChatbotResponse(BaseModel):
    session_id: str
    initial_response: ChatResponse
    status: str
    user_id: int

class AssessmentReport(BaseModel):
    mental_age: int
    intellect_level: str
    detailed_report: str
    assessment_data: List[Dict[str, Any]]
    generated_at: datetime = Field(default_factory=datetime.utcnow)

class LearningRecommendation(BaseModel):
    topic: Optional[str] = None
    subject_filter: Optional[str] = None

class ChatbotStatus(BaseModel):
    user_id: int
    current_stage: str
    mental_age: Optional[int]
    intellect_level: Optional[str]
    assessment_progress: Optional[str]
    last_interaction: Optional[datetime]

class ErrorResponse(BaseModel):
    error: str
    message: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)


# --- QUIZ MODELS ---

class QuizQuestion(BaseModel):
    question_id: Optional[int] = None  # optional for creation, auto-generated by DB
    question_text: str
    options: List[str]
    correct_option_index: Optional[int] = None  # Keep hidden from frontend if needed

class Quiz(BaseModel):
    quiz_id: Optional[int] = None
    title: str
    description: Optional[str] = None
    questions: List[QuizQuestion]

class QuizAnswer(BaseModel):
    question_id: int
    selected_option_index: int

class QuizSubmission(BaseModel):
    user_id: int
    quiz_id: int
    answers: List[QuizAnswer]

class QuizResult(BaseModel):
    user_id: int
    quiz_id: int
    score: int
    total_questions: int
    submitted_at: datetime
