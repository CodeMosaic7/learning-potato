from pydantic import BaseModel, EmailStr, validator, EmailStr
from datetime import datetime
from typing import Optional, List

# === USER SCHEMAS ===

# class RegisterSchema(BaseModel):
#     name: str
#     email: str
#     username: str
#     password: str

class UserBase(BaseModel):
    email: str
    username: str
    full_name: Optional[str] = None

class UserCreate(UserBase):
    password: str

    @validator('password')
    def validate_password(cls, v):
        if len(v) < 8:
            raise ValueError('Password must be at least 8 characters long')
        return v

    @validator('username')
    def validate_username(cls, v):
        if len(v) < 3:
            raise ValueError('Username must be at least 3 characters long')
        return v

class UserResponse(UserBase):
    id: int
    is_active: bool
    is_verified: bool
    created_at: datetime
    mental_age: Optional[int] = None
    assessment_date: Optional[datetime] = None

    class Config:
        from_attributes = True

class UserLogin(BaseModel):
    email: str
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    email: Optional[str] = None


# === CHATBOT SCHEMAS ===

class ChatMessage(BaseModel):
    message: str

class ChatResponse(BaseModel):
    response: str
    assessment_completed: bool = False
    mental_age: Optional[int] = None
    conversation_context: str = "guidance"  # either "assessment" or "guidance"


# === MENTAL AGE ASSESSMENT ===

class MentalAgeAssessment(BaseModel):
    user_id: int
    mental_age: Optional[int] = None
    assessment_date: Optional[datetime] = None
    has_assessment: bool = False

class AssessmentResponse(BaseModel):
    question_number: int
    question: str
    response: str

class AssessmentResult(BaseModel):
    user_id: int
    mental_age: int
    responses: List[AssessmentResponse]
    assessment_date: datetime


# === WEBSITE GUIDANCE / CHAT STATE ===

class WebsiteGuidance(BaseModel):
    feature: str
    path: str
    description: str

class ChatSessionState(BaseModel):
    user_id: int
    assessment_stage: str
    current_question: int
    mental_age: Optional[int] = None
    conversation_context: str

# --- QUIZ MODELS ---

class QuizQuestion(BaseModel):
    question_id: Optional[int] = None  # optional for creation, auto-generated by DB
    question_text: str
    options: List[str]
    correct_option_index: Optional[int] = None  # Keep hidden from frontend if needed

class Quiz(BaseModel):
    quiz_id: Optional[int] = None
    title: str
    description: Optional[str] = None
    questions: List[QuizQuestion]

class QuizAnswer(BaseModel):
    question_id: int
    selected_option_index: int

class QuizSubmission(BaseModel):
    user_id: int
    quiz_id: int
    answers: List[QuizAnswer]

class QuizResult(BaseModel):
    user_id: int
    quiz_id: int
    score: int
    total_questions: int
    submitted_at: datetime
